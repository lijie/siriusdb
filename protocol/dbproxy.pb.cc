// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbproxy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dbproxy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dbproto {

namespace {

const ::google::protobuf::Descriptor* Get_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Get_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Set_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Set_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Del_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Del_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawSQL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawSQL_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawSQLResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawSQLResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawRedis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawRedis_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawRedisResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawRedisResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlushItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlushItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* command_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* errcode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* flags_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dbproxy_2eproto() {
  protobuf_AddDesc_dbproxy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dbproxy.proto");
  GOOGLE_CHECK(file != NULL);
  Get_descriptor_ = file->message_type(0);
  static const int Get_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, flags_),
  };
  Get_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Get_descriptor_,
      Get::default_instance_,
      Get_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Get));
  GetResult_descriptor_ = file->message_type(1);
  static const int GetResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResult, data_),
  };
  GetResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetResult_descriptor_,
      GetResult::default_instance_,
      GetResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetResult));
  Set_descriptor_ = file->message_type(2);
  static const int Set_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, flags_),
  };
  Set_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Set_descriptor_,
      Set::default_instance_,
      Set_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Set));
  SetResult_descriptor_ = file->message_type(3);
  static const int SetResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetResult, last_insert_id_),
  };
  SetResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetResult_descriptor_,
      SetResult::default_instance_,
      SetResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetResult));
  Del_descriptor_ = file->message_type(4);
  static const int Del_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Del, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Del, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Del, flags_),
  };
  Del_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Del_descriptor_,
      Del::default_instance_,
      Del_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Del, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Del, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Del));
  RawSQL_descriptor_ = file->message_type(5);
  static const int RawSQL_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawSQL, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawSQL, sql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawSQL, flags_),
  };
  RawSQL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RawSQL_descriptor_,
      RawSQL::default_instance_,
      RawSQL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawSQL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawSQL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RawSQL));
  RawSQLResult_descriptor_ = file->message_type(6);
  static const int RawSQLResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawSQLResult, values_),
  };
  RawSQLResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RawSQLResult_descriptor_,
      RawSQLResult::default_instance_,
      RawSQLResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawSQLResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawSQLResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RawSQLResult));
  RawRedis_descriptor_ = file->message_type(7);
  static const int RawRedis_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawRedis, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawRedis, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawRedis, flags_),
  };
  RawRedis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RawRedis_descriptor_,
      RawRedis::default_instance_,
      RawRedis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawRedis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawRedis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RawRedis));
  RawRedisResult_descriptor_ = file->message_type(8);
  static const int RawRedisResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawRedisResult, values_),
  };
  RawRedisResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RawRedisResult_descriptor_,
      RawRedisResult::default_instance_,
      RawRedisResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawRedisResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawRedisResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RawRedisResult));
  UseDB_descriptor_ = file->message_type(9);
  static const int UseDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseDB, dbname_),
  };
  UseDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseDB_descriptor_,
      UseDB::default_instance_,
      UseDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseDB));
  FlushItem_descriptor_ = file->message_type(10);
  static const int FlushItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushItem, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushItem, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushItem, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushItem, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushItem, dbname_),
  };
  FlushItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlushItem_descriptor_,
      FlushItem::default_instance_,
      FlushItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlushItem));
  command_descriptor_ = file->enum_type(0);
  errcode_descriptor_ = file->enum_type(1);
  flags_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dbproxy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Get_descriptor_, &Get::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetResult_descriptor_, &GetResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Set_descriptor_, &Set::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetResult_descriptor_, &SetResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Del_descriptor_, &Del::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RawSQL_descriptor_, &RawSQL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RawSQLResult_descriptor_, &RawSQLResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RawRedis_descriptor_, &RawRedis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RawRedisResult_descriptor_, &RawRedisResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseDB_descriptor_, &UseDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlushItem_descriptor_, &FlushItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dbproxy_2eproto() {
  delete Get::default_instance_;
  delete Get_reflection_;
  delete GetResult::default_instance_;
  delete GetResult_reflection_;
  delete Set::default_instance_;
  delete Set_reflection_;
  delete SetResult::default_instance_;
  delete SetResult_reflection_;
  delete Del::default_instance_;
  delete Del_reflection_;
  delete RawSQL::default_instance_;
  delete RawSQL_reflection_;
  delete RawSQLResult::default_instance_;
  delete RawSQLResult_reflection_;
  delete RawRedis::default_instance_;
  delete RawRedis_reflection_;
  delete RawRedisResult::default_instance_;
  delete RawRedisResult_reflection_;
  delete UseDB::default_instance_;
  delete UseDB_reflection_;
  delete FlushItem::default_instance_;
  delete FlushItem_reflection_;
}

void protobuf_AddDesc_dbproxy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rdbproxy.proto\022\007dbproto\032 google/protobu"
    "f/descriptor.proto\"6\n\003Get\022\020\n\010msg_type\030\001 "
    "\002(\t\022\013\n\003key\030\002 \002(\t\022\020\n\005flags\030\003 \001(\r:\0010\"\031\n\tGe"
    "tResult\022\014\n\004data\030\001 \003(\014\"E\n\003Set\022\020\n\010msg_type"
    "\030\001 \002(\t\022\013\n\003key\030\002 \002(\t\022\r\n\005value\030\003 \002(\014\022\020\n\005fl"
    "ags\030\004 \001(\r:\0010\",\n\tSetResult\022\031\n\016last_insert"
    "_id\030\001 \001(\004:\0010:\004\240\202\031\001\"6\n\003Del\022\020\n\010msg_type\030\001 "
    "\002(\t\022\013\n\003key\030\002 \002(\t\022\020\n\005flags\030\003 \001(\r:\0010\"9\n\006Ra"
    "wSQL\022\020\n\010msg_type\030\001 \002(\t\022\013\n\003sql\030\002 \002(\014\022\020\n\005f"
    "lags\030\003 \001(\r:\0010\"\036\n\014RawSQLResult\022\016\n\006values\030"
    "\001 \003(\014\"\?\n\010RawRedis\022\020\n\010msg_type\030\001 \002(\t\022\017\n\007c"
    "ommand\030\002 \002(\014\022\020\n\005flags\030\003 \001(\r:\0010\" \n\016RawRed"
    "isResult\022\016\n\006values\030\001 \003(\014\"\027\n\005UseDB\022\016\n\006dbn"
    "ame\030\001 \002(\t\"U\n\tFlushItem\022\013\n\003key\030\001 \002(\t\022\020\n\010m"
    "sg_type\030\002 \002(\t\022\014\n\004time\030\003 \002(\004\022\013\n\003cmd\030\004 \002(\r"
    "\022\016\n\006dbname\030\005 \002(\t*\273\002\n\007command\022\017\n\013CMD_SET_"
    "REQ\020k\022\017\n\013CMD_SET_RSP\020l\022\017\n\013CMD_GET_REQ\020m\022"
    "\017\n\013CMD_GET_RSP\020n\022\017\n\013CMD_DEL_REQ\020o\022\017\n\013CMD"
    "_DEL_RSP\020p\022\022\n\016CMD_RAWSQL_REQ\020q\022\022\n\016CMD_RA"
    "WSQL_RSP\020r\022\024\n\020CMD_RAWREDIS_REQ\020s\022\024\n\020CMD_"
    "RAWREDIS_RSP\020t\022\024\n\020CMD_SELECTDB_REQ\020u\022\024\n\020"
    "CMD_SELECTDB_RSP\020v\022\021\n\rCMD_SETNX_REQ\020w\022\021\n"
    "\rCMD_SETNX_RSP\020x\022\021\n\rCMD_USEDB_REQ\020y\022\021\n\rC"
    "MD_USEDB_RSP\020z*\347\001\n\007errcode\022\020\n\013ERR_RWCACH"
    "E\020\365N\022\r\n\010ERR_RWDB\020\366N\022\017\n\nERR_UNPACK\020\367N\022\024\n\017"
    "ERR_SAMEACCOUNT\020\370N\022\023\n\016ERR_CORRUPTION\020\371N\022"
    "\017\n\nERR_NODATA\020\372N\022\016\n\tERR_GSERR\020\373N\022\020\n\013ERR_"
    "TIMEOUT\020\374N\022\022\n\rERR_DICONNECT\020\375N\022\022\n\rERR_UN"
    "KNOWNDB\020\376N\022\020\n\013ERR_EMPTYDB\020\377N\022\022\n\rERR_UNKN"
    "OWMSG\020\200O*g\n\005flags\022\020\n\014FLAG_DB_ONLY\020\001\022\023\n\017F"
    "LAG_CACHE_ONLY\020\002\022\021\n\rFLAG_SET_ONLY\020\004\022\022\n\016F"
    "LAG_MULTI_GET\020\010\022\020\n\014FLAG_LAST_ID\020\020:.\n\005ind"
    "ex\022\035.google.protobuf.FieldOptions\030\212\230\003 \001("
    "\010:5\n\014index_unique\022\035.google.protobuf.Fiel"
    "dOptions\030\213\230\003 \001(\010:<\n\023mysql_create_option\022"
    "\035.google.protobuf.FieldOptions\030\214\230\003 \001(\t:."
    "\n\003orm\022\037.google.protobuf.MessageOptions\030\244"
    "\220\003 \001(\010:5\n\nindexfield\022\037.google.protobuf.M"
    "essageOptions\030\245\220\003 \001(\t:D\n\031mysql_create_ta"
    "ble_option\022\037.google.protobuf.MessageOpti"
    "ons\030\246\220\003 \001(\t", 1611);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dbproxy.proto", &protobuf_RegisterTypes);
  Get::default_instance_ = new Get();
  GetResult::default_instance_ = new GetResult();
  Set::default_instance_ = new Set();
  SetResult::default_instance_ = new SetResult();
  Del::default_instance_ = new Del();
  RawSQL::default_instance_ = new RawSQL();
  RawSQLResult::default_instance_ = new RawSQLResult();
  RawRedis::default_instance_ = new RawRedis();
  RawRedisResult::default_instance_ = new RawRedisResult();
  UseDB::default_instance_ = new UseDB();
  FlushItem::default_instance_ = new FlushItem();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    52234, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    52235, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    52236, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::MessageOptions::default_instance(),
    51236, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::MessageOptions::default_instance(),
    51237, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::MessageOptions::default_instance(),
    51238, 9, false, false);
  Get::default_instance_->InitAsDefaultInstance();
  GetResult::default_instance_->InitAsDefaultInstance();
  Set::default_instance_->InitAsDefaultInstance();
  SetResult::default_instance_->InitAsDefaultInstance();
  Del::default_instance_->InitAsDefaultInstance();
  RawSQL::default_instance_->InitAsDefaultInstance();
  RawSQLResult::default_instance_->InitAsDefaultInstance();
  RawRedis::default_instance_->InitAsDefaultInstance();
  RawRedisResult::default_instance_->InitAsDefaultInstance();
  UseDB::default_instance_->InitAsDefaultInstance();
  FlushItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dbproxy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dbproxy_2eproto {
  StaticDescriptorInitializer_dbproxy_2eproto() {
    protobuf_AddDesc_dbproxy_2eproto();
  }
} static_descriptor_initializer_dbproxy_2eproto_;
const ::google::protobuf::EnumDescriptor* command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return command_descriptor_;
}
bool command_IsValid(int value) {
  switch(value) {
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* errcode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return errcode_descriptor_;
}
bool errcode_IsValid(int value) {
  switch(value) {
    case 10101:
    case 10102:
    case 10103:
    case 10104:
    case 10105:
    case 10106:
    case 10107:
    case 10108:
    case 10109:
    case 10110:
    case 10111:
    case 10112:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flags_descriptor_;
}
bool flags_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Get::kMsgTypeFieldNumber;
const int Get::kKeyFieldNumber;
const int Get::kFlagsFieldNumber;
#endif  // !_MSC_VER

Get::Get()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Get::InitAsDefaultInstance() {
}

Get::Get(const Get& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Get::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Get::~Get() {
  SharedDtor();
}

void Get::SharedDtor() {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_type_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void Get::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Get::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Get_descriptor_;
}

const Get& Get::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

Get* Get::default_instance_ = NULL;

Get* Get::New() const {
  return new Get;
}

void Get::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_type()) {
      if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
        msg_type_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    flags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Get::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_type().data(), this->msg_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Get::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg_type(), output);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  // optional uint32 flags = 3 [default = 0];
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Get::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_type(), target);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional uint32 flags = 3 [default = 0];
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Get::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_type());
    }

    // required string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional uint32 flags = 3 [default = 0];
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Get::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Get* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Get*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Get::MergeFrom(const Get& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Get::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Get::CopyFrom(const Get& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Get::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Get::Swap(Get* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(key_, other->key_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Get::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Get_descriptor_;
  metadata.reflection = Get_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetResult::kDataFieldNumber;
#endif  // !_MSC_VER

GetResult::GetResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetResult::InitAsDefaultInstance() {
}

GetResult::GetResult(const GetResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetResult::~GetResult() {
  SharedDtor();
}

void GetResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetResult_descriptor_;
}

const GetResult& GetResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

GetResult* GetResult::default_instance_ = NULL;

GetResult* GetResult::New() const {
  return new GetResult;
}

void GetResult::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetResult::ByteSize() const {
  int total_size = 0;

  // repeated bytes data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetResult::MergeFrom(const GetResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResult::CopyFrom(const GetResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResult::IsInitialized() const {

  return true;
}

void GetResult::Swap(GetResult* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetResult_descriptor_;
  metadata.reflection = GetResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Set::kMsgTypeFieldNumber;
const int Set::kKeyFieldNumber;
const int Set::kValueFieldNumber;
const int Set::kFlagsFieldNumber;
#endif  // !_MSC_VER

Set::Set()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Set::InitAsDefaultInstance() {
}

Set::Set(const Set& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Set::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Set::~Set() {
  SharedDtor();
}

void Set::SharedDtor() {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_type_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Set::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Set_descriptor_;
}

const Set& Set::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

Set* Set::default_instance_ = NULL;

Set* Set::New() const {
  return new Set;
}

void Set::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_type()) {
      if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
        msg_type_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    flags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_type().data(), this->msg_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // required bytes value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg_type(), output);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  // required bytes value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->value(), output);
  }

  // optional uint32 flags = 4 [default = 0];
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Set::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_type(), target);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // required bytes value = 3;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // optional uint32 flags = 4 [default = 0];
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Set::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_type());
    }

    // required string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required bytes value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional uint32 flags = 4 [default = 0];
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Set::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Set* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Set*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Set::MergeFrom(const Set& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Set::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Set::CopyFrom(const Set& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Set::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Set::Swap(Set* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Set::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Set_descriptor_;
  metadata.reflection = Set_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetResult::kLastInsertIdFieldNumber;
#endif  // !_MSC_VER

SetResult::SetResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetResult::InitAsDefaultInstance() {
}

SetResult::SetResult(const SetResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetResult::SharedCtor() {
  _cached_size_ = 0;
  last_insert_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetResult::~SetResult() {
  SharedDtor();
}

void SetResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetResult_descriptor_;
}

const SetResult& SetResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

SetResult* SetResult::default_instance_ = NULL;

SetResult* SetResult::New() const {
  return new SetResult;
}

void SetResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_insert_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 last_insert_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_insert_id_)));
          set_has_last_insert_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 last_insert_id = 1 [default = 0];
  if (has_last_insert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->last_insert_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 last_insert_id = 1 [default = 0];
  if (has_last_insert_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->last_insert_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 last_insert_id = 1 [default = 0];
    if (has_last_insert_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_insert_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetResult::MergeFrom(const SetResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_insert_id()) {
      set_last_insert_id(from.last_insert_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetResult::CopyFrom(const SetResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResult::IsInitialized() const {

  return true;
}

void SetResult::Swap(SetResult* other) {
  if (other != this) {
    std::swap(last_insert_id_, other->last_insert_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetResult_descriptor_;
  metadata.reflection = SetResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Del::kMsgTypeFieldNumber;
const int Del::kKeyFieldNumber;
const int Del::kFlagsFieldNumber;
#endif  // !_MSC_VER

Del::Del()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Del::InitAsDefaultInstance() {
}

Del::Del(const Del& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Del::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Del::~Del() {
  SharedDtor();
}

void Del::SharedDtor() {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_type_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void Del::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Del::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Del_descriptor_;
}

const Del& Del::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

Del* Del::default_instance_ = NULL;

Del* Del::New() const {
  return new Del;
}

void Del::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_type()) {
      if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
        msg_type_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    flags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Del::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_type().data(), this->msg_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Del::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg_type(), output);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  // optional uint32 flags = 3 [default = 0];
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Del::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_type(), target);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional uint32 flags = 3 [default = 0];
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Del::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_type());
    }

    // required string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional uint32 flags = 3 [default = 0];
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Del::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Del* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Del*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Del::MergeFrom(const Del& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Del::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Del::CopyFrom(const Del& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Del::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Del::Swap(Del* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(key_, other->key_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Del::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Del_descriptor_;
  metadata.reflection = Del_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RawSQL::kMsgTypeFieldNumber;
const int RawSQL::kSqlFieldNumber;
const int RawSQL::kFlagsFieldNumber;
#endif  // !_MSC_VER

RawSQL::RawSQL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RawSQL::InitAsDefaultInstance() {
}

RawSQL::RawSQL(const RawSQL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RawSQL::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RawSQL::~RawSQL() {
  SharedDtor();
}

void RawSQL::SharedDtor() {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_type_;
  }
  if (sql_ != &::google::protobuf::internal::kEmptyString) {
    delete sql_;
  }
  if (this != default_instance_) {
  }
}

void RawSQL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawSQL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawSQL_descriptor_;
}

const RawSQL& RawSQL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

RawSQL* RawSQL::default_instance_ = NULL;

RawSQL* RawSQL::New() const {
  return new RawSQL;
}

void RawSQL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_type()) {
      if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
        msg_type_->clear();
      }
    }
    if (has_sql()) {
      if (sql_ != &::google::protobuf::internal::kEmptyString) {
        sql_->clear();
      }
    }
    flags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RawSQL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_type().data(), this->msg_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sql;
        break;
      }

      // required bytes sql = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sql:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sql()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RawSQL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg_type(), output);
  }

  // required bytes sql = 2;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->sql(), output);
  }

  // optional uint32 flags = 3 [default = 0];
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RawSQL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_type(), target);
  }

  // required bytes sql = 2;
  if (has_sql()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sql(), target);
  }

  // optional uint32 flags = 3 [default = 0];
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RawSQL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_type());
    }

    // required bytes sql = 2;
    if (has_sql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sql());
    }

    // optional uint32 flags = 3 [default = 0];
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawSQL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RawSQL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RawSQL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RawSQL::MergeFrom(const RawSQL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_sql()) {
      set_sql(from.sql());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RawSQL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawSQL::CopyFrom(const RawSQL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawSQL::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RawSQL::Swap(RawSQL* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(sql_, other->sql_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RawSQL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawSQL_descriptor_;
  metadata.reflection = RawSQL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RawSQLResult::kValuesFieldNumber;
#endif  // !_MSC_VER

RawSQLResult::RawSQLResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RawSQLResult::InitAsDefaultInstance() {
}

RawSQLResult::RawSQLResult(const RawSQLResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RawSQLResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RawSQLResult::~RawSQLResult() {
  SharedDtor();
}

void RawSQLResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RawSQLResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawSQLResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawSQLResult_descriptor_;
}

const RawSQLResult& RawSQLResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

RawSQLResult* RawSQLResult::default_instance_ = NULL;

RawSQLResult* RawSQLResult::New() const {
  return new RawSQLResult;
}

void RawSQLResult::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RawSQLResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RawSQLResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RawSQLResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RawSQLResult::ByteSize() const {
  int total_size = 0;

  // repeated bytes values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawSQLResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RawSQLResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RawSQLResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RawSQLResult::MergeFrom(const RawSQLResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RawSQLResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawSQLResult::CopyFrom(const RawSQLResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawSQLResult::IsInitialized() const {

  return true;
}

void RawSQLResult::Swap(RawSQLResult* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RawSQLResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawSQLResult_descriptor_;
  metadata.reflection = RawSQLResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RawRedis::kMsgTypeFieldNumber;
const int RawRedis::kCommandFieldNumber;
const int RawRedis::kFlagsFieldNumber;
#endif  // !_MSC_VER

RawRedis::RawRedis()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RawRedis::InitAsDefaultInstance() {
}

RawRedis::RawRedis(const RawRedis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RawRedis::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RawRedis::~RawRedis() {
  SharedDtor();
}

void RawRedis::SharedDtor() {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_type_;
  }
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void RawRedis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawRedis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawRedis_descriptor_;
}

const RawRedis& RawRedis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

RawRedis* RawRedis::default_instance_ = NULL;

RawRedis* RawRedis::New() const {
  return new RawRedis;
}

void RawRedis::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_type()) {
      if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
        msg_type_->clear();
      }
    }
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::kEmptyString) {
        command_->clear();
      }
    }
    flags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RawRedis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_type().data(), this->msg_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command;
        break;
      }

      // required bytes command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RawRedis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg_type(), output);
  }

  // required bytes command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->command(), output);
  }

  // optional uint32 flags = 3 [default = 0];
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RawRedis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_type(), target);
  }

  // required bytes command = 2;
  if (has_command()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->command(), target);
  }

  // optional uint32 flags = 3 [default = 0];
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RawRedis::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_type());
    }

    // required bytes command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->command());
    }

    // optional uint32 flags = 3 [default = 0];
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawRedis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RawRedis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RawRedis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RawRedis::MergeFrom(const RawRedis& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RawRedis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawRedis::CopyFrom(const RawRedis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawRedis::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RawRedis::Swap(RawRedis* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(command_, other->command_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RawRedis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawRedis_descriptor_;
  metadata.reflection = RawRedis_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RawRedisResult::kValuesFieldNumber;
#endif  // !_MSC_VER

RawRedisResult::RawRedisResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RawRedisResult::InitAsDefaultInstance() {
}

RawRedisResult::RawRedisResult(const RawRedisResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RawRedisResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RawRedisResult::~RawRedisResult() {
  SharedDtor();
}

void RawRedisResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RawRedisResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawRedisResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawRedisResult_descriptor_;
}

const RawRedisResult& RawRedisResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

RawRedisResult* RawRedisResult::default_instance_ = NULL;

RawRedisResult* RawRedisResult::New() const {
  return new RawRedisResult;
}

void RawRedisResult::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RawRedisResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RawRedisResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RawRedisResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RawRedisResult::ByteSize() const {
  int total_size = 0;

  // repeated bytes values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawRedisResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RawRedisResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RawRedisResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RawRedisResult::MergeFrom(const RawRedisResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RawRedisResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawRedisResult::CopyFrom(const RawRedisResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawRedisResult::IsInitialized() const {

  return true;
}

void RawRedisResult::Swap(RawRedisResult* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RawRedisResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawRedisResult_descriptor_;
  metadata.reflection = RawRedisResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseDB::kDbnameFieldNumber;
#endif  // !_MSC_VER

UseDB::UseDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseDB::InitAsDefaultInstance() {
}

UseDB::UseDB(const UseDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseDB::SharedCtor() {
  _cached_size_ = 0;
  dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseDB::~UseDB() {
  SharedDtor();
}

void UseDB::SharedDtor() {
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    delete dbname_;
  }
  if (this != default_instance_) {
  }
}

void UseDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseDB_descriptor_;
}

const UseDB& UseDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

UseDB* UseDB::default_instance_ = NULL;

UseDB* UseDB::New() const {
  return new UseDB;
}

void UseDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dbname()) {
      if (dbname_ != &::google::protobuf::internal::kEmptyString) {
        dbname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dbname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbname().data(), this->dbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dbname = 1;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dbname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dbname = 1;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dbname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dbname = 1;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseDB::MergeFrom(const UseDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseDB::CopyFrom(const UseDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UseDB::Swap(UseDB* other) {
  if (other != this) {
    std::swap(dbname_, other->dbname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseDB_descriptor_;
  metadata.reflection = UseDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlushItem::kKeyFieldNumber;
const int FlushItem::kMsgTypeFieldNumber;
const int FlushItem::kTimeFieldNumber;
const int FlushItem::kCmdFieldNumber;
const int FlushItem::kDbnameFieldNumber;
#endif  // !_MSC_VER

FlushItem::FlushItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlushItem::InitAsDefaultInstance() {
}

FlushItem::FlushItem(const FlushItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlushItem::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  cmd_ = 0u;
  dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlushItem::~FlushItem() {
  SharedDtor();
}

void FlushItem::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_type_;
  }
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    delete dbname_;
  }
  if (this != default_instance_) {
  }
}

void FlushItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlushItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlushItem_descriptor_;
}

const FlushItem& FlushItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

FlushItem* FlushItem::default_instance_ = NULL;

FlushItem* FlushItem::New() const {
  return new FlushItem;
}

void FlushItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_msg_type()) {
      if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
        msg_type_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    cmd_ = 0u;
    if (has_dbname()) {
      if (dbname_ != &::google::protobuf::internal::kEmptyString) {
        dbname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlushItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_type;
        break;
      }

      // required string msg_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_type().data(), this->msg_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cmd;
        break;
      }

      // required uint32 cmd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dbname;
        break;
      }

      // required string dbname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbname().data(), this->dbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlushItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string msg_type = 2;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg_type(), output);
  }

  // required uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // required uint32 cmd = 4;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmd(), output);
  }

  // required string dbname = 5;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->dbname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlushItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string msg_type = 2;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg_type(), target);
  }

  // required uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // required uint32 cmd = 4;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmd(), target);
  }

  // required string dbname = 5;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dbname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlushItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string msg_type = 2;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_type());
    }

    // required uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // required uint32 cmd = 4;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // required string dbname = 5;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlushItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlushItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlushItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlushItem::MergeFrom(const FlushItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlushItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushItem::CopyFrom(const FlushItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FlushItem::Swap(FlushItem* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(time_, other->time_);
    std::swap(cmd_, other->cmd_);
    std::swap(dbname_, other->dbname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlushItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlushItem_descriptor_;
  metadata.reflection = FlushItem_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  index(kIndexFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  index_unique(kIndexUniqueFieldNumber, false);
const ::std::string mysql_create_option_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  mysql_create_option(kMysqlCreateOptionFieldNumber, mysql_create_option_default);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  orm(kOrmFieldNumber, false);
const ::std::string indexfield_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  indexfield(kIndexfieldFieldNumber, indexfield_default);
const ::std::string mysql_create_table_option_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  mysql_create_table_option(kMysqlCreateTableOptionFieldNumber, mysql_create_table_option_default);

// @@protoc_insertion_point(namespace_scope)

}  // namespace dbproto

// @@protoc_insertion_point(global_scope)
