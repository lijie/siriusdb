// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbproxy.proto

#ifndef PROTOBUF_dbproxy_2eproto__INCLUDED
#define PROTOBUF_dbproxy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

namespace dbproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dbproxy_2eproto();
void protobuf_AssignDesc_dbproxy_2eproto();
void protobuf_ShutdownFile_dbproxy_2eproto();

class Get;
class GetResult;
class Set;
class SetResult;
class Del;
class RawSQL;
class RawSQLResult;
class RawRedis;
class RawRedisResult;
class UseDB;
class FlushItem;

enum command {
  CMD_SET_REQ = 107,
  CMD_SET_RSP = 108,
  CMD_GET_REQ = 109,
  CMD_GET_RSP = 110,
  CMD_DEL_REQ = 111,
  CMD_DEL_RSP = 112,
  CMD_RAWSQL_REQ = 113,
  CMD_RAWSQL_RSP = 114,
  CMD_RAWREDIS_REQ = 115,
  CMD_RAWREDIS_RSP = 116,
  CMD_SELECTDB_REQ = 117,
  CMD_SELECTDB_RSP = 118,
  CMD_SETNX_REQ = 119,
  CMD_SETNX_RSP = 120,
  CMD_USEDB_REQ = 121,
  CMD_USEDB_RSP = 122
};
bool command_IsValid(int value);
const command command_MIN = CMD_SET_REQ;
const command command_MAX = CMD_USEDB_RSP;
const int command_ARRAYSIZE = command_MAX + 1;

const ::google::protobuf::EnumDescriptor* command_descriptor();
inline const ::std::string& command_Name(command value) {
  return ::google::protobuf::internal::NameOfEnum(
    command_descriptor(), value);
}
inline bool command_Parse(
    const ::std::string& name, command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<command>(
    command_descriptor(), name, value);
}
enum errcode {
  ERR_RWCACHE = 10101,
  ERR_RWDB = 10102,
  ERR_UNPACK = 10103,
  ERR_SAMEACCOUNT = 10104,
  ERR_CORRUPTION = 10105,
  ERR_NODATA = 10106,
  ERR_GSERR = 10107,
  ERR_TIMEOUT = 10108,
  ERR_DICONNECT = 10109,
  ERR_UNKNOWNDB = 10110,
  ERR_EMPTYDB = 10111,
  ERR_UNKNOWMSG = 10112
};
bool errcode_IsValid(int value);
const errcode errcode_MIN = ERR_RWCACHE;
const errcode errcode_MAX = ERR_UNKNOWMSG;
const int errcode_ARRAYSIZE = errcode_MAX + 1;

const ::google::protobuf::EnumDescriptor* errcode_descriptor();
inline const ::std::string& errcode_Name(errcode value) {
  return ::google::protobuf::internal::NameOfEnum(
    errcode_descriptor(), value);
}
inline bool errcode_Parse(
    const ::std::string& name, errcode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<errcode>(
    errcode_descriptor(), name, value);
}
enum flags {
  FLAG_DB_ONLY = 1,
  FLAG_CACHE_ONLY = 2,
  FLAG_SET_ONLY = 4,
  FLAG_MULTI_GET = 8,
  FLAG_LAST_ID = 16
};
bool flags_IsValid(int value);
const flags flags_MIN = FLAG_DB_ONLY;
const flags flags_MAX = FLAG_LAST_ID;
const int flags_ARRAYSIZE = flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* flags_descriptor();
inline const ::std::string& flags_Name(flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    flags_descriptor(), value);
}
inline bool flags_Parse(
    const ::std::string& name, flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<flags>(
    flags_descriptor(), name, value);
}
// ===================================================================

class Get : public ::google::protobuf::Message {
 public:
  Get();
  virtual ~Get();

  Get(const Get& from);

  inline Get& operator=(const Get& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Get& default_instance();

  void Swap(Get* other);

  // implements Message ----------------------------------------------

  Get* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Get& from);
  void MergeFrom(const Get& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string msg_type = 1;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  inline const ::std::string& msg_type() const;
  inline void set_msg_type(const ::std::string& value);
  inline void set_msg_type(const char* value);
  inline void set_msg_type(const char* value, size_t size);
  inline ::std::string* mutable_msg_type();
  inline ::std::string* release_msg_type();
  inline void set_allocated_msg_type(::std::string* msg_type);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional uint32 flags = 3 [default = 0];
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 3;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dbproto.Get)
 private:
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_flags();
  inline void clear_has_flags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_type_;
  ::std::string* key_;
  ::google::protobuf::uint32 flags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static Get* default_instance_;
};
// -------------------------------------------------------------------

class GetResult : public ::google::protobuf::Message {
 public:
  GetResult();
  virtual ~GetResult();

  GetResult(const GetResult& from);

  inline GetResult& operator=(const GetResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResult& default_instance();

  void Swap(GetResult* other);

  // implements Message ----------------------------------------------

  GetResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetResult& from);
  void MergeFrom(const GetResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data(int index) const;
  inline ::std::string* mutable_data(int index);
  inline void set_data(int index, const ::std::string& value);
  inline void set_data(int index, const char* value);
  inline void set_data(int index, const void* value, size_t size);
  inline ::std::string* add_data();
  inline void add_data(const ::std::string& value);
  inline void add_data(const char* value);
  inline void add_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data();

  // @@protoc_insertion_point(class_scope:dbproto.GetResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static GetResult* default_instance_;
};
// -------------------------------------------------------------------

class Set : public ::google::protobuf::Message {
 public:
  Set();
  virtual ~Set();

  Set(const Set& from);

  inline Set& operator=(const Set& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Set& default_instance();

  void Swap(Set* other);

  // implements Message ----------------------------------------------

  Set* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Set& from);
  void MergeFrom(const Set& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string msg_type = 1;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  inline const ::std::string& msg_type() const;
  inline void set_msg_type(const ::std::string& value);
  inline void set_msg_type(const char* value);
  inline void set_msg_type(const char* value, size_t size);
  inline ::std::string* mutable_msg_type();
  inline ::std::string* release_msg_type();
  inline void set_allocated_msg_type(::std::string* msg_type);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional uint32 flags = 4 [default = 0];
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 4;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dbproto.Set)
 private:
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_flags();
  inline void clear_has_flags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_type_;
  ::std::string* key_;
  ::std::string* value_;
  ::google::protobuf::uint32 flags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static Set* default_instance_;
};
// -------------------------------------------------------------------

class SetResult : public ::google::protobuf::Message {
 public:
  SetResult();
  virtual ~SetResult();

  SetResult(const SetResult& from);

  inline SetResult& operator=(const SetResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetResult& default_instance();

  void Swap(SetResult* other);

  // implements Message ----------------------------------------------

  SetResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetResult& from);
  void MergeFrom(const SetResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 last_insert_id = 1 [default = 0];
  inline bool has_last_insert_id() const;
  inline void clear_last_insert_id();
  static const int kLastInsertIdFieldNumber = 1;
  inline ::google::protobuf::uint64 last_insert_id() const;
  inline void set_last_insert_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbproto.SetResult)
 private:
  inline void set_has_last_insert_id();
  inline void clear_has_last_insert_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 last_insert_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static SetResult* default_instance_;
};
// -------------------------------------------------------------------

class Del : public ::google::protobuf::Message {
 public:
  Del();
  virtual ~Del();

  Del(const Del& from);

  inline Del& operator=(const Del& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Del& default_instance();

  void Swap(Del* other);

  // implements Message ----------------------------------------------

  Del* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Del& from);
  void MergeFrom(const Del& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string msg_type = 1;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  inline const ::std::string& msg_type() const;
  inline void set_msg_type(const ::std::string& value);
  inline void set_msg_type(const char* value);
  inline void set_msg_type(const char* value, size_t size);
  inline ::std::string* mutable_msg_type();
  inline ::std::string* release_msg_type();
  inline void set_allocated_msg_type(::std::string* msg_type);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional uint32 flags = 3 [default = 0];
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 3;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dbproto.Del)
 private:
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_flags();
  inline void clear_has_flags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_type_;
  ::std::string* key_;
  ::google::protobuf::uint32 flags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static Del* default_instance_;
};
// -------------------------------------------------------------------

class RawSQL : public ::google::protobuf::Message {
 public:
  RawSQL();
  virtual ~RawSQL();

  RawSQL(const RawSQL& from);

  inline RawSQL& operator=(const RawSQL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawSQL& default_instance();

  void Swap(RawSQL* other);

  // implements Message ----------------------------------------------

  RawSQL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RawSQL& from);
  void MergeFrom(const RawSQL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string msg_type = 1;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  inline const ::std::string& msg_type() const;
  inline void set_msg_type(const ::std::string& value);
  inline void set_msg_type(const char* value);
  inline void set_msg_type(const char* value, size_t size);
  inline ::std::string* mutable_msg_type();
  inline ::std::string* release_msg_type();
  inline void set_allocated_msg_type(::std::string* msg_type);

  // required bytes sql = 2;
  inline bool has_sql() const;
  inline void clear_sql();
  static const int kSqlFieldNumber = 2;
  inline const ::std::string& sql() const;
  inline void set_sql(const ::std::string& value);
  inline void set_sql(const char* value);
  inline void set_sql(const void* value, size_t size);
  inline ::std::string* mutable_sql();
  inline ::std::string* release_sql();
  inline void set_allocated_sql(::std::string* sql);

  // optional uint32 flags = 3 [default = 0];
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 3;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dbproto.RawSQL)
 private:
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_sql();
  inline void clear_has_sql();
  inline void set_has_flags();
  inline void clear_has_flags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_type_;
  ::std::string* sql_;
  ::google::protobuf::uint32 flags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static RawSQL* default_instance_;
};
// -------------------------------------------------------------------

class RawSQLResult : public ::google::protobuf::Message {
 public:
  RawSQLResult();
  virtual ~RawSQLResult();

  RawSQLResult(const RawSQLResult& from);

  inline RawSQLResult& operator=(const RawSQLResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawSQLResult& default_instance();

  void Swap(RawSQLResult* other);

  // implements Message ----------------------------------------------

  RawSQLResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RawSQLResult& from);
  void MergeFrom(const RawSQLResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes values = 1;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 1;
  inline const ::std::string& values(int index) const;
  inline ::std::string* mutable_values(int index);
  inline void set_values(int index, const ::std::string& value);
  inline void set_values(int index, const char* value);
  inline void set_values(int index, const void* value, size_t size);
  inline ::std::string* add_values();
  inline void add_values(const ::std::string& value);
  inline void add_values(const char* value);
  inline void add_values(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:dbproto.RawSQLResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static RawSQLResult* default_instance_;
};
// -------------------------------------------------------------------

class RawRedis : public ::google::protobuf::Message {
 public:
  RawRedis();
  virtual ~RawRedis();

  RawRedis(const RawRedis& from);

  inline RawRedis& operator=(const RawRedis& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawRedis& default_instance();

  void Swap(RawRedis* other);

  // implements Message ----------------------------------------------

  RawRedis* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RawRedis& from);
  void MergeFrom(const RawRedis& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string msg_type = 1;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  inline const ::std::string& msg_type() const;
  inline void set_msg_type(const ::std::string& value);
  inline void set_msg_type(const char* value);
  inline void set_msg_type(const char* value, size_t size);
  inline ::std::string* mutable_msg_type();
  inline ::std::string* release_msg_type();
  inline void set_allocated_msg_type(::std::string* msg_type);

  // required bytes command = 2;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 2;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const void* value, size_t size);
  inline ::std::string* mutable_command();
  inline ::std::string* release_command();
  inline void set_allocated_command(::std::string* command);

  // optional uint32 flags = 3 [default = 0];
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 3;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dbproto.RawRedis)
 private:
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_flags();
  inline void clear_has_flags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_type_;
  ::std::string* command_;
  ::google::protobuf::uint32 flags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static RawRedis* default_instance_;
};
// -------------------------------------------------------------------

class RawRedisResult : public ::google::protobuf::Message {
 public:
  RawRedisResult();
  virtual ~RawRedisResult();

  RawRedisResult(const RawRedisResult& from);

  inline RawRedisResult& operator=(const RawRedisResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawRedisResult& default_instance();

  void Swap(RawRedisResult* other);

  // implements Message ----------------------------------------------

  RawRedisResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RawRedisResult& from);
  void MergeFrom(const RawRedisResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes values = 1;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 1;
  inline const ::std::string& values(int index) const;
  inline ::std::string* mutable_values(int index);
  inline void set_values(int index, const ::std::string& value);
  inline void set_values(int index, const char* value);
  inline void set_values(int index, const void* value, size_t size);
  inline ::std::string* add_values();
  inline void add_values(const ::std::string& value);
  inline void add_values(const char* value);
  inline void add_values(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:dbproto.RawRedisResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static RawRedisResult* default_instance_;
};
// -------------------------------------------------------------------

class UseDB : public ::google::protobuf::Message {
 public:
  UseDB();
  virtual ~UseDB();

  UseDB(const UseDB& from);

  inline UseDB& operator=(const UseDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseDB& default_instance();

  void Swap(UseDB* other);

  // implements Message ----------------------------------------------

  UseDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseDB& from);
  void MergeFrom(const UseDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string dbname = 1;
  inline bool has_dbname() const;
  inline void clear_dbname();
  static const int kDbnameFieldNumber = 1;
  inline const ::std::string& dbname() const;
  inline void set_dbname(const ::std::string& value);
  inline void set_dbname(const char* value);
  inline void set_dbname(const char* value, size_t size);
  inline ::std::string* mutable_dbname();
  inline ::std::string* release_dbname();
  inline void set_allocated_dbname(::std::string* dbname);

  // @@protoc_insertion_point(class_scope:dbproto.UseDB)
 private:
  inline void set_has_dbname();
  inline void clear_has_dbname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dbname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static UseDB* default_instance_;
};
// -------------------------------------------------------------------

class FlushItem : public ::google::protobuf::Message {
 public:
  FlushItem();
  virtual ~FlushItem();

  FlushItem(const FlushItem& from);

  inline FlushItem& operator=(const FlushItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushItem& default_instance();

  void Swap(FlushItem* other);

  // implements Message ----------------------------------------------

  FlushItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlushItem& from);
  void MergeFrom(const FlushItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string msg_type = 2;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 2;
  inline const ::std::string& msg_type() const;
  inline void set_msg_type(const ::std::string& value);
  inline void set_msg_type(const char* value);
  inline void set_msg_type(const char* value, size_t size);
  inline ::std::string* mutable_msg_type();
  inline ::std::string* release_msg_type();
  inline void set_allocated_msg_type(::std::string* msg_type);

  // required uint64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // required uint32 cmd = 4;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 4;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // required string dbname = 5;
  inline bool has_dbname() const;
  inline void clear_dbname();
  static const int kDbnameFieldNumber = 5;
  inline const ::std::string& dbname() const;
  inline void set_dbname(const ::std::string& value);
  inline void set_dbname(const char* value);
  inline void set_dbname(const char* value, size_t size);
  inline ::std::string* mutable_dbname();
  inline ::std::string* release_dbname();
  inline void set_allocated_dbname(::std::string* dbname);

  // @@protoc_insertion_point(class_scope:dbproto.FlushItem)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_dbname();
  inline void clear_has_dbname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* msg_type_;
  ::google::protobuf::uint64 time_;
  ::std::string* dbname_;
  ::google::protobuf::uint32 cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static FlushItem* default_instance_;
};
// ===================================================================

static const int kIndexFieldNumber = 52234;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  index;
static const int kIndexUniqueFieldNumber = 52235;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  index_unique;
static const int kMysqlCreateOptionFieldNumber = 52236;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  mysql_create_option;
static const int kOrmFieldNumber = 51236;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  orm;
static const int kIndexfieldFieldNumber = 51237;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  indexfield;
static const int kMysqlCreateTableOptionFieldNumber = 51238;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  mysql_create_table_option;

// ===================================================================

// Get

// required string msg_type = 1;
inline bool Get::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Get::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Get::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Get::clear_msg_type() {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    msg_type_->clear();
  }
  clear_has_msg_type();
}
inline const ::std::string& Get::msg_type() const {
  return *msg_type_;
}
inline void Get::set_msg_type(const ::std::string& value) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(value);
}
inline void Get::set_msg_type(const char* value) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(value);
}
inline void Get::set_msg_type(const char* value, size_t size) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Get::mutable_msg_type() {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  return msg_type_;
}
inline ::std::string* Get::release_msg_type() {
  clear_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_type_;
    msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Get::set_allocated_msg_type(::std::string* msg_type) {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_type_;
  }
  if (msg_type) {
    set_has_msg_type();
    msg_type_ = msg_type;
  } else {
    clear_has_msg_type();
    msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string key = 2;
inline bool Get::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Get::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Get::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Get::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Get::key() const {
  return *key_;
}
inline void Get::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Get::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Get::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Get::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Get::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Get::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 flags = 3 [default = 0];
inline bool Get::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Get::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Get::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Get::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 Get::flags() const {
  return flags_;
}
inline void Get::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// -------------------------------------------------------------------

// GetResult

// repeated bytes data = 1;
inline int GetResult::data_size() const {
  return data_.size();
}
inline void GetResult::clear_data() {
  data_.Clear();
}
inline const ::std::string& GetResult::data(int index) const {
  return data_.Get(index);
}
inline ::std::string* GetResult::mutable_data(int index) {
  return data_.Mutable(index);
}
inline void GetResult::set_data(int index, const ::std::string& value) {
  data_.Mutable(index)->assign(value);
}
inline void GetResult::set_data(int index, const char* value) {
  data_.Mutable(index)->assign(value);
}
inline void GetResult::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetResult::add_data() {
  return data_.Add();
}
inline void GetResult::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
}
inline void GetResult::add_data(const char* value) {
  data_.Add()->assign(value);
}
inline void GetResult::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetResult::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetResult::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// Set

// required string msg_type = 1;
inline bool Set::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Set::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Set::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Set::clear_msg_type() {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    msg_type_->clear();
  }
  clear_has_msg_type();
}
inline const ::std::string& Set::msg_type() const {
  return *msg_type_;
}
inline void Set::set_msg_type(const ::std::string& value) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(value);
}
inline void Set::set_msg_type(const char* value) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(value);
}
inline void Set::set_msg_type(const char* value, size_t size) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Set::mutable_msg_type() {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  return msg_type_;
}
inline ::std::string* Set::release_msg_type() {
  clear_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_type_;
    msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Set::set_allocated_msg_type(::std::string* msg_type) {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_type_;
  }
  if (msg_type) {
    set_has_msg_type();
    msg_type_ = msg_type;
  } else {
    clear_has_msg_type();
    msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string key = 2;
inline bool Set::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Set::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Set::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Set::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Set::key() const {
  return *key_;
}
inline void Set::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Set::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Set::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Set::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Set::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Set::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 3;
inline bool Set::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Set::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Set::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Set::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Set::value() const {
  return *value_;
}
inline void Set::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Set::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Set::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Set::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Set::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Set::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 flags = 4 [default = 0];
inline bool Set::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Set::set_has_flags() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Set::clear_has_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Set::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 Set::flags() const {
  return flags_;
}
inline void Set::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// -------------------------------------------------------------------

// SetResult

// optional uint64 last_insert_id = 1 [default = 0];
inline bool SetResult::has_last_insert_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetResult::set_has_last_insert_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetResult::clear_has_last_insert_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetResult::clear_last_insert_id() {
  last_insert_id_ = GOOGLE_ULONGLONG(0);
  clear_has_last_insert_id();
}
inline ::google::protobuf::uint64 SetResult::last_insert_id() const {
  return last_insert_id_;
}
inline void SetResult::set_last_insert_id(::google::protobuf::uint64 value) {
  set_has_last_insert_id();
  last_insert_id_ = value;
}

// -------------------------------------------------------------------

// Del

// required string msg_type = 1;
inline bool Del::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Del::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Del::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Del::clear_msg_type() {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    msg_type_->clear();
  }
  clear_has_msg_type();
}
inline const ::std::string& Del::msg_type() const {
  return *msg_type_;
}
inline void Del::set_msg_type(const ::std::string& value) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(value);
}
inline void Del::set_msg_type(const char* value) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(value);
}
inline void Del::set_msg_type(const char* value, size_t size) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Del::mutable_msg_type() {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  return msg_type_;
}
inline ::std::string* Del::release_msg_type() {
  clear_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_type_;
    msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Del::set_allocated_msg_type(::std::string* msg_type) {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_type_;
  }
  if (msg_type) {
    set_has_msg_type();
    msg_type_ = msg_type;
  } else {
    clear_has_msg_type();
    msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string key = 2;
inline bool Del::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Del::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Del::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Del::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Del::key() const {
  return *key_;
}
inline void Del::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Del::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Del::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Del::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Del::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Del::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 flags = 3 [default = 0];
inline bool Del::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Del::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Del::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Del::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 Del::flags() const {
  return flags_;
}
inline void Del::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// -------------------------------------------------------------------

// RawSQL

// required string msg_type = 1;
inline bool RawSQL::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RawSQL::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RawSQL::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RawSQL::clear_msg_type() {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    msg_type_->clear();
  }
  clear_has_msg_type();
}
inline const ::std::string& RawSQL::msg_type() const {
  return *msg_type_;
}
inline void RawSQL::set_msg_type(const ::std::string& value) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(value);
}
inline void RawSQL::set_msg_type(const char* value) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(value);
}
inline void RawSQL::set_msg_type(const char* value, size_t size) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RawSQL::mutable_msg_type() {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  return msg_type_;
}
inline ::std::string* RawSQL::release_msg_type() {
  clear_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_type_;
    msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RawSQL::set_allocated_msg_type(::std::string* msg_type) {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_type_;
  }
  if (msg_type) {
    set_has_msg_type();
    msg_type_ = msg_type;
  } else {
    clear_has_msg_type();
    msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes sql = 2;
inline bool RawSQL::has_sql() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RawSQL::set_has_sql() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RawSQL::clear_has_sql() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RawSQL::clear_sql() {
  if (sql_ != &::google::protobuf::internal::kEmptyString) {
    sql_->clear();
  }
  clear_has_sql();
}
inline const ::std::string& RawSQL::sql() const {
  return *sql_;
}
inline void RawSQL::set_sql(const ::std::string& value) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
}
inline void RawSQL::set_sql(const char* value) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
}
inline void RawSQL::set_sql(const void* value, size_t size) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    sql_ = new ::std::string;
  }
  sql_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RawSQL::mutable_sql() {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    sql_ = new ::std::string;
  }
  return sql_;
}
inline ::std::string* RawSQL::release_sql() {
  clear_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sql_;
    sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RawSQL::set_allocated_sql(::std::string* sql) {
  if (sql_ != &::google::protobuf::internal::kEmptyString) {
    delete sql_;
  }
  if (sql) {
    set_has_sql();
    sql_ = sql;
  } else {
    clear_has_sql();
    sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 flags = 3 [default = 0];
inline bool RawSQL::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RawSQL::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RawSQL::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RawSQL::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 RawSQL::flags() const {
  return flags_;
}
inline void RawSQL::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// -------------------------------------------------------------------

// RawSQLResult

// repeated bytes values = 1;
inline int RawSQLResult::values_size() const {
  return values_.size();
}
inline void RawSQLResult::clear_values() {
  values_.Clear();
}
inline const ::std::string& RawSQLResult::values(int index) const {
  return values_.Get(index);
}
inline ::std::string* RawSQLResult::mutable_values(int index) {
  return values_.Mutable(index);
}
inline void RawSQLResult::set_values(int index, const ::std::string& value) {
  values_.Mutable(index)->assign(value);
}
inline void RawSQLResult::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
}
inline void RawSQLResult::set_values(int index, const void* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RawSQLResult::add_values() {
  return values_.Add();
}
inline void RawSQLResult::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
}
inline void RawSQLResult::add_values(const char* value) {
  values_.Add()->assign(value);
}
inline void RawSQLResult::add_values(const void* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RawSQLResult::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RawSQLResult::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// RawRedis

// required string msg_type = 1;
inline bool RawRedis::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RawRedis::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RawRedis::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RawRedis::clear_msg_type() {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    msg_type_->clear();
  }
  clear_has_msg_type();
}
inline const ::std::string& RawRedis::msg_type() const {
  return *msg_type_;
}
inline void RawRedis::set_msg_type(const ::std::string& value) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(value);
}
inline void RawRedis::set_msg_type(const char* value) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(value);
}
inline void RawRedis::set_msg_type(const char* value, size_t size) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RawRedis::mutable_msg_type() {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  return msg_type_;
}
inline ::std::string* RawRedis::release_msg_type() {
  clear_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_type_;
    msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RawRedis::set_allocated_msg_type(::std::string* msg_type) {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_type_;
  }
  if (msg_type) {
    set_has_msg_type();
    msg_type_ = msg_type;
  } else {
    clear_has_msg_type();
    msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes command = 2;
inline bool RawRedis::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RawRedis::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RawRedis::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RawRedis::clear_command() {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    command_->clear();
  }
  clear_has_command();
}
inline const ::std::string& RawRedis::command() const {
  return *command_;
}
inline void RawRedis::set_command(const ::std::string& value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void RawRedis::set_command(const char* value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void RawRedis::set_command(const void* value, size_t size) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RawRedis::mutable_command() {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  return command_;
}
inline ::std::string* RawRedis::release_command() {
  clear_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = command_;
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RawRedis::set_allocated_command(::std::string* command) {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    delete command_;
  }
  if (command) {
    set_has_command();
    command_ = command;
  } else {
    clear_has_command();
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 flags = 3 [default = 0];
inline bool RawRedis::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RawRedis::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RawRedis::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RawRedis::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 RawRedis::flags() const {
  return flags_;
}
inline void RawRedis::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// -------------------------------------------------------------------

// RawRedisResult

// repeated bytes values = 1;
inline int RawRedisResult::values_size() const {
  return values_.size();
}
inline void RawRedisResult::clear_values() {
  values_.Clear();
}
inline const ::std::string& RawRedisResult::values(int index) const {
  return values_.Get(index);
}
inline ::std::string* RawRedisResult::mutable_values(int index) {
  return values_.Mutable(index);
}
inline void RawRedisResult::set_values(int index, const ::std::string& value) {
  values_.Mutable(index)->assign(value);
}
inline void RawRedisResult::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
}
inline void RawRedisResult::set_values(int index, const void* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RawRedisResult::add_values() {
  return values_.Add();
}
inline void RawRedisResult::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
}
inline void RawRedisResult::add_values(const char* value) {
  values_.Add()->assign(value);
}
inline void RawRedisResult::add_values(const void* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RawRedisResult::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RawRedisResult::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// UseDB

// required string dbname = 1;
inline bool UseDB::has_dbname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseDB::set_has_dbname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseDB::clear_has_dbname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseDB::clear_dbname() {
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    dbname_->clear();
  }
  clear_has_dbname();
}
inline const ::std::string& UseDB::dbname() const {
  return *dbname_;
}
inline void UseDB::set_dbname(const ::std::string& value) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(value);
}
inline void UseDB::set_dbname(const char* value) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(value);
}
inline void UseDB::set_dbname(const char* value, size_t size) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UseDB::mutable_dbname() {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    dbname_ = new ::std::string;
  }
  return dbname_;
}
inline ::std::string* UseDB::release_dbname() {
  clear_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dbname_;
    dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UseDB::set_allocated_dbname(::std::string* dbname) {
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    delete dbname_;
  }
  if (dbname) {
    set_has_dbname();
    dbname_ = dbname;
  } else {
    clear_has_dbname();
    dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FlushItem

// required string key = 1;
inline bool FlushItem::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlushItem::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlushItem::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlushItem::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& FlushItem::key() const {
  return *key_;
}
inline void FlushItem::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void FlushItem::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void FlushItem::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlushItem::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* FlushItem::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FlushItem::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string msg_type = 2;
inline bool FlushItem::has_msg_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlushItem::set_has_msg_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlushItem::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlushItem::clear_msg_type() {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    msg_type_->clear();
  }
  clear_has_msg_type();
}
inline const ::std::string& FlushItem::msg_type() const {
  return *msg_type_;
}
inline void FlushItem::set_msg_type(const ::std::string& value) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(value);
}
inline void FlushItem::set_msg_type(const char* value) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(value);
}
inline void FlushItem::set_msg_type(const char* value, size_t size) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlushItem::mutable_msg_type() {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  return msg_type_;
}
inline ::std::string* FlushItem::release_msg_type() {
  clear_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_type_;
    msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FlushItem::set_allocated_msg_type(::std::string* msg_type) {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_type_;
  }
  if (msg_type) {
    set_has_msg_type();
    msg_type_ = msg_type;
  } else {
    clear_has_msg_type();
    msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 time = 3;
inline bool FlushItem::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlushItem::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FlushItem::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FlushItem::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 FlushItem::time() const {
  return time_;
}
inline void FlushItem::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// required uint32 cmd = 4;
inline bool FlushItem::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FlushItem::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FlushItem::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FlushItem::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 FlushItem::cmd() const {
  return cmd_;
}
inline void FlushItem::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// required string dbname = 5;
inline bool FlushItem::has_dbname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FlushItem::set_has_dbname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FlushItem::clear_has_dbname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FlushItem::clear_dbname() {
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    dbname_->clear();
  }
  clear_has_dbname();
}
inline const ::std::string& FlushItem::dbname() const {
  return *dbname_;
}
inline void FlushItem::set_dbname(const ::std::string& value) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(value);
}
inline void FlushItem::set_dbname(const char* value) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(value);
}
inline void FlushItem::set_dbname(const char* value, size_t size) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlushItem::mutable_dbname() {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    dbname_ = new ::std::string;
  }
  return dbname_;
}
inline ::std::string* FlushItem::release_dbname() {
  clear_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dbname_;
    dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FlushItem::set_allocated_dbname(::std::string* dbname) {
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    delete dbname_;
  }
  if (dbname) {
    set_has_dbname();
    dbname_ = dbname;
  } else {
    clear_has_dbname();
    dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbproto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dbproto::command>() {
  return ::dbproto::command_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dbproto::errcode>() {
  return ::dbproto::errcode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dbproto::flags>() {
  return ::dbproto::flags_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dbproxy_2eproto__INCLUDED
