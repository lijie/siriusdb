// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onlinedb.proto

#ifndef PROTOBUF_onlinedb_2eproto__INCLUDED
#define PROTOBUF_onlinedb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/protobuf/descriptor.pb.h"
#include "dbproxy.pb.h"
// @@protoc_insertion_point(includes)

namespace onlinedb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_onlinedb_2eproto();
void protobuf_AssignDesc_onlinedb_2eproto();
void protobuf_ShutdownFile_onlinedb_2eproto();

class AccountTable;
class RoleInfo;
class AccountInfo;
class NameTable;

// ===================================================================

class AccountTable : public ::google::protobuf::Message {
 public:
  AccountTable();
  virtual ~AccountTable();

  AccountTable(const AccountTable& from);

  inline AccountTable& operator=(const AccountTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountTable& default_instance();

  void Swap(AccountTable* other);

  // implements Message ----------------------------------------------

  AccountTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountTable& from);
  void MergeFrom(const AccountTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:onlinedb.AccountTable)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_onlinedb_2eproto();
  friend void protobuf_AssignDesc_onlinedb_2eproto();
  friend void protobuf_ShutdownFile_onlinedb_2eproto();

  void InitAsDefaultInstance();
  static AccountTable* default_instance_;
};
// -------------------------------------------------------------------

class RoleInfo : public ::google::protobuf::Message {
 public:
  RoleInfo();
  virtual ~RoleInfo();

  RoleInfo(const RoleInfo& from);

  inline RoleInfo& operator=(const RoleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleInfo& default_instance();

  void Swap(RoleInfo* other);

  // implements Message ----------------------------------------------

  RoleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleInfo& from);
  void MergeFrom(const RoleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 id = 2 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required uint64 createtime = 3;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 3;
  inline ::google::protobuf::uint64 createtime() const;
  inline void set_createtime(::google::protobuf::uint64 value);

  // required uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // required uint32 aid = 5;
  inline bool has_aid() const;
  inline void clear_aid();
  static const int kAidFieldNumber = 5;
  inline ::google::protobuf::uint32 aid() const;
  inline void set_aid(::google::protobuf::uint32 value);

  // optional uint64 logintime = 6 [default = 0];
  inline bool has_logintime() const;
  inline void clear_logintime();
  static const int kLogintimeFieldNumber = 6;
  inline ::google::protobuf::uint64 logintime() const;
  inline void set_logintime(::google::protobuf::uint64 value);

  // optional bool islogin = 7 [default = false];
  inline bool has_islogin() const;
  inline void clear_islogin();
  static const int kIsloginFieldNumber = 7;
  inline bool islogin() const;
  inline void set_islogin(bool value);

  // optional uint64 gid = 8 [default = 0];
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 8;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);

  // optional bytes token = 9;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 9;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const void* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional bytes extend = 10;
  inline bool has_extend() const;
  inline void clear_extend();
  static const int kExtendFieldNumber = 10;
  inline const ::std::string& extend() const;
  inline void set_extend(const ::std::string& value);
  inline void set_extend(const char* value);
  inline void set_extend(const void* value, size_t size);
  inline ::std::string* mutable_extend();
  inline ::std::string* release_extend();
  inline void set_allocated_extend(::std::string* extend);

  // @@protoc_insertion_point(class_scope:onlinedb.RoleInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_aid();
  inline void clear_has_aid();
  inline void set_has_logintime();
  inline void clear_has_logintime();
  inline void set_has_islogin();
  inline void clear_has_islogin();
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_extend();
  inline void clear_has_extend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 createtime_;
  ::google::protobuf::uint32 sid_;
  ::google::protobuf::uint32 aid_;
  ::google::protobuf::uint64 logintime_;
  ::google::protobuf::uint64 gid_;
  ::std::string* token_;
  ::std::string* extend_;
  bool islogin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_onlinedb_2eproto();
  friend void protobuf_AssignDesc_onlinedb_2eproto();
  friend void protobuf_ShutdownFile_onlinedb_2eproto();

  void InitAsDefaultInstance();
  static RoleInfo* default_instance_;
};
// -------------------------------------------------------------------

class AccountInfo : public ::google::protobuf::Message {
 public:
  AccountInfo();
  virtual ~AccountInfo();

  AccountInfo(const AccountInfo& from);

  inline AccountInfo& operator=(const AccountInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountInfo& default_instance();

  void Swap(AccountInfo* other);

  // implements Message ----------------------------------------------

  AccountInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountInfo& from);
  void MergeFrom(const AccountInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required uint64 regtime = 2;
  inline bool has_regtime() const;
  inline void clear_regtime();
  static const int kRegtimeFieldNumber = 2;
  inline ::google::protobuf::uint64 regtime() const;
  inline void set_regtime(::google::protobuf::uint64 value);

  // repeated .onlinedb.RoleInfo roles = 3;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 3;
  inline const ::onlinedb::RoleInfo& roles(int index) const;
  inline ::onlinedb::RoleInfo* mutable_roles(int index);
  inline ::onlinedb::RoleInfo* add_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::onlinedb::RoleInfo >&
      roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::onlinedb::RoleInfo >*
      mutable_roles();

  // @@protoc_insertion_point(class_scope:onlinedb.AccountInfo)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_regtime();
  inline void clear_has_regtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint64 regtime_;
  ::google::protobuf::RepeatedPtrField< ::onlinedb::RoleInfo > roles_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_onlinedb_2eproto();
  friend void protobuf_AssignDesc_onlinedb_2eproto();
  friend void protobuf_ShutdownFile_onlinedb_2eproto();

  void InitAsDefaultInstance();
  static AccountInfo* default_instance_;
};
// -------------------------------------------------------------------

class NameTable : public ::google::protobuf::Message {
 public:
  NameTable();
  virtual ~NameTable();

  NameTable(const NameTable& from);

  inline NameTable& operator=(const NameTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameTable& default_instance();

  void Swap(NameTable* other);

  // implements Message ----------------------------------------------

  NameTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NameTable& from);
  void MergeFrom(const NameTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:onlinedb.NameTable)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_onlinedb_2eproto();
  friend void protobuf_AssignDesc_onlinedb_2eproto();
  friend void protobuf_ShutdownFile_onlinedb_2eproto();

  void InitAsDefaultInstance();
  static NameTable* default_instance_;
};
// ===================================================================


// ===================================================================

// AccountTable

// required string name = 1;
inline bool AccountTable::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountTable::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountTable::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountTable::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AccountTable::name() const {
  return *name_;
}
inline void AccountTable::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AccountTable::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AccountTable::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountTable::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* AccountTable::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountTable::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 2;
inline bool AccountTable::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountTable::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountTable::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountTable::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& AccountTable::value() const {
  return *value_;
}
inline void AccountTable::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void AccountTable::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void AccountTable::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountTable::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* AccountTable::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountTable::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RoleInfo

// required string name = 1;
inline bool RoleInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RoleInfo::name() const {
  return *name_;
}
inline void RoleInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoleInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoleInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RoleInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 id = 2 [default = 0];
inline bool RoleInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 RoleInfo::id() const {
  return id_;
}
inline void RoleInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required uint64 createtime = 3;
inline bool RoleInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleInfo::clear_createtime() {
  createtime_ = GOOGLE_ULONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::uint64 RoleInfo::createtime() const {
  return createtime_;
}
inline void RoleInfo::set_createtime(::google::protobuf::uint64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required uint32 sid = 4;
inline bool RoleInfo::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleInfo::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleInfo::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleInfo::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 RoleInfo::sid() const {
  return sid_;
}
inline void RoleInfo::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
}

// required uint32 aid = 5;
inline bool RoleInfo::has_aid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleInfo::set_has_aid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleInfo::clear_has_aid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleInfo::clear_aid() {
  aid_ = 0u;
  clear_has_aid();
}
inline ::google::protobuf::uint32 RoleInfo::aid() const {
  return aid_;
}
inline void RoleInfo::set_aid(::google::protobuf::uint32 value) {
  set_has_aid();
  aid_ = value;
}

// optional uint64 logintime = 6 [default = 0];
inline bool RoleInfo::has_logintime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleInfo::set_has_logintime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoleInfo::clear_has_logintime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoleInfo::clear_logintime() {
  logintime_ = GOOGLE_ULONGLONG(0);
  clear_has_logintime();
}
inline ::google::protobuf::uint64 RoleInfo::logintime() const {
  return logintime_;
}
inline void RoleInfo::set_logintime(::google::protobuf::uint64 value) {
  set_has_logintime();
  logintime_ = value;
}

// optional bool islogin = 7 [default = false];
inline bool RoleInfo::has_islogin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoleInfo::set_has_islogin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoleInfo::clear_has_islogin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoleInfo::clear_islogin() {
  islogin_ = false;
  clear_has_islogin();
}
inline bool RoleInfo::islogin() const {
  return islogin_;
}
inline void RoleInfo::set_islogin(bool value) {
  set_has_islogin();
  islogin_ = value;
}

// optional uint64 gid = 8 [default = 0];
inline bool RoleInfo::has_gid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoleInfo::set_has_gid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoleInfo::clear_has_gid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoleInfo::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 RoleInfo::gid() const {
  return gid_;
}
inline void RoleInfo::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
}

// optional bytes token = 9;
inline bool RoleInfo::has_token() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoleInfo::set_has_token() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoleInfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoleInfo::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& RoleInfo::token() const {
  return *token_;
}
inline void RoleInfo::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void RoleInfo::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void RoleInfo::set_token(const void* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleInfo::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* RoleInfo::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleInfo::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes extend = 10;
inline bool RoleInfo::has_extend() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoleInfo::set_has_extend() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RoleInfo::clear_has_extend() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RoleInfo::clear_extend() {
  if (extend_ != &::google::protobuf::internal::kEmptyString) {
    extend_->clear();
  }
  clear_has_extend();
}
inline const ::std::string& RoleInfo::extend() const {
  return *extend_;
}
inline void RoleInfo::set_extend(const ::std::string& value) {
  set_has_extend();
  if (extend_ == &::google::protobuf::internal::kEmptyString) {
    extend_ = new ::std::string;
  }
  extend_->assign(value);
}
inline void RoleInfo::set_extend(const char* value) {
  set_has_extend();
  if (extend_ == &::google::protobuf::internal::kEmptyString) {
    extend_ = new ::std::string;
  }
  extend_->assign(value);
}
inline void RoleInfo::set_extend(const void* value, size_t size) {
  set_has_extend();
  if (extend_ == &::google::protobuf::internal::kEmptyString) {
    extend_ = new ::std::string;
  }
  extend_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleInfo::mutable_extend() {
  set_has_extend();
  if (extend_ == &::google::protobuf::internal::kEmptyString) {
    extend_ = new ::std::string;
  }
  return extend_;
}
inline ::std::string* RoleInfo::release_extend() {
  clear_has_extend();
  if (extend_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extend_;
    extend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleInfo::set_allocated_extend(::std::string* extend) {
  if (extend_ != &::google::protobuf::internal::kEmptyString) {
    delete extend_;
  }
  if (extend) {
    set_has_extend();
    extend_ = extend;
  } else {
    clear_has_extend();
    extend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AccountInfo

// required string account = 1;
inline bool AccountInfo::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountInfo::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountInfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountInfo::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& AccountInfo::account() const {
  return *account_;
}
inline void AccountInfo::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void AccountInfo::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void AccountInfo::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountInfo::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* AccountInfo::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountInfo::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 regtime = 2;
inline bool AccountInfo::has_regtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountInfo::set_has_regtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountInfo::clear_has_regtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountInfo::clear_regtime() {
  regtime_ = GOOGLE_ULONGLONG(0);
  clear_has_regtime();
}
inline ::google::protobuf::uint64 AccountInfo::regtime() const {
  return regtime_;
}
inline void AccountInfo::set_regtime(::google::protobuf::uint64 value) {
  set_has_regtime();
  regtime_ = value;
}

// repeated .onlinedb.RoleInfo roles = 3;
inline int AccountInfo::roles_size() const {
  return roles_.size();
}
inline void AccountInfo::clear_roles() {
  roles_.Clear();
}
inline const ::onlinedb::RoleInfo& AccountInfo::roles(int index) const {
  return roles_.Get(index);
}
inline ::onlinedb::RoleInfo* AccountInfo::mutable_roles(int index) {
  return roles_.Mutable(index);
}
inline ::onlinedb::RoleInfo* AccountInfo::add_roles() {
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onlinedb::RoleInfo >&
AccountInfo::roles() const {
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::onlinedb::RoleInfo >*
AccountInfo::mutable_roles() {
  return &roles_;
}

// -------------------------------------------------------------------

// NameTable

// optional uint64 id = 1;
inline bool NameTable::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NameTable::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NameTable::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NameTable::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 NameTable::id() const {
  return id_;
}
inline void NameTable::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool NameTable::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NameTable::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NameTable::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NameTable::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NameTable::name() const {
  return *name_;
}
inline void NameTable::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NameTable::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NameTable::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NameTable::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NameTable::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NameTable::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace onlinedb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_onlinedb_2eproto__INCLUDED
