// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: immortaldb.proto

#ifndef PROTOBUF_immortaldb_2eproto__INCLUDED
#define PROTOBUF_immortaldb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/protobuf/descriptor.pb.h"
#include "dbproxy.pb.h"
// @@protoc_insertion_point(includes)

namespace immortaldb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_immortaldb_2eproto();
void protobuf_AssignDesc_immortaldb_2eproto();
void protobuf_ShutdownFile_immortaldb_2eproto();

class Item;
class ItemList;
class Player;

// ===================================================================

class Item : public ::google::protobuf::Message {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  void Swap(Item* other);

  // implements Message ----------------------------------------------

  Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:immortaldb.Item)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_immortaldb_2eproto();
  friend void protobuf_AssignDesc_immortaldb_2eproto();
  friend void protobuf_ShutdownFile_immortaldb_2eproto();

  void InitAsDefaultInstance();
  static Item* default_instance_;
};
// -------------------------------------------------------------------

class ItemList : public ::google::protobuf::Message {
 public:
  ItemList();
  virtual ~ItemList();

  ItemList(const ItemList& from);

  inline ItemList& operator=(const ItemList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemList& default_instance();

  void Swap(ItemList* other);

  // implements Message ----------------------------------------------

  ItemList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemList& from);
  void MergeFrom(const ItemList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .immortaldb.Item items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::immortaldb::Item& items(int index) const;
  inline ::immortaldb::Item* mutable_items(int index);
  inline ::immortaldb::Item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::immortaldb::Item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::immortaldb::Item >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:immortaldb.ItemList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::immortaldb::Item > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_immortaldb_2eproto();
  friend void protobuf_AssignDesc_immortaldb_2eproto();
  friend void protobuf_ShutdownFile_immortaldb_2eproto();

  void InitAsDefaultInstance();
  static ItemList* default_instance_;
};
// -------------------------------------------------------------------

class Player : public ::google::protobuf::Message {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  void Swap(Player* other);

  // implements Message ----------------------------------------------

  Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional bytes extend = 5;
  inline bool has_extend() const;
  inline void clear_extend();
  static const int kExtendFieldNumber = 5;
  inline const ::std::string& extend() const;
  inline void set_extend(const ::std::string& value);
  inline void set_extend(const char* value);
  inline void set_extend(const void* value, size_t size);
  inline ::std::string* mutable_extend();
  inline ::std::string* release_extend();
  inline void set_allocated_extend(::std::string* extend);

  // optional .immortaldb.ItemList itemlist = 6;
  inline bool has_itemlist() const;
  inline void clear_itemlist();
  static const int kItemlistFieldNumber = 6;
  inline const ::immortaldb::ItemList& itemlist() const;
  inline ::immortaldb::ItemList* mutable_itemlist();
  inline ::immortaldb::ItemList* release_itemlist();
  inline void set_allocated_itemlist(::immortaldb::ItemList* itemlist);

  // required uint64 roleid = 7;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 7;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:immortaldb.Player)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_extend();
  inline void clear_has_extend();
  inline void set_has_itemlist();
  inline void clear_has_itemlist();
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* name_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 exp_;
  ::std::string* extend_;
  ::immortaldb::ItemList* itemlist_;
  ::google::protobuf::uint64 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_immortaldb_2eproto();
  friend void protobuf_AssignDesc_immortaldb_2eproto();
  friend void protobuf_ShutdownFile_immortaldb_2eproto();

  void InitAsDefaultInstance();
  static Player* default_instance_;
};
// ===================================================================


// ===================================================================

// Item

// required uint32 id = 1;
inline bool Item::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Item::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Item::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Item::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Item::id() const {
  return id_;
}
inline void Item::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// ItemList

// repeated .immortaldb.Item items = 1;
inline int ItemList::items_size() const {
  return items_.size();
}
inline void ItemList::clear_items() {
  items_.Clear();
}
inline const ::immortaldb::Item& ItemList::items(int index) const {
  return items_.Get(index);
}
inline ::immortaldb::Item* ItemList::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::immortaldb::Item* ItemList::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::immortaldb::Item >&
ItemList::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::immortaldb::Item >*
ItemList::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// Player

// required string account = 1;
inline bool Player::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& Player::account() const {
  return *account_;
}
inline void Player::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void Player::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void Player::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* Player::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 2;
inline bool Player::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Player::name() const {
  return *name_;
}
inline void Player::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Player::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Player::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Player::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 level = 3;
inline bool Player::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Player::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Player::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Player::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Player::level() const {
  return level_;
}
inline void Player::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 exp = 4;
inline bool Player::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Player::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Player::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Player::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 Player::exp() const {
  return exp_;
}
inline void Player::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional bytes extend = 5;
inline bool Player::has_extend() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Player::set_has_extend() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Player::clear_has_extend() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Player::clear_extend() {
  if (extend_ != &::google::protobuf::internal::kEmptyString) {
    extend_->clear();
  }
  clear_has_extend();
}
inline const ::std::string& Player::extend() const {
  return *extend_;
}
inline void Player::set_extend(const ::std::string& value) {
  set_has_extend();
  if (extend_ == &::google::protobuf::internal::kEmptyString) {
    extend_ = new ::std::string;
  }
  extend_->assign(value);
}
inline void Player::set_extend(const char* value) {
  set_has_extend();
  if (extend_ == &::google::protobuf::internal::kEmptyString) {
    extend_ = new ::std::string;
  }
  extend_->assign(value);
}
inline void Player::set_extend(const void* value, size_t size) {
  set_has_extend();
  if (extend_ == &::google::protobuf::internal::kEmptyString) {
    extend_ = new ::std::string;
  }
  extend_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_extend() {
  set_has_extend();
  if (extend_ == &::google::protobuf::internal::kEmptyString) {
    extend_ = new ::std::string;
  }
  return extend_;
}
inline ::std::string* Player::release_extend() {
  clear_has_extend();
  if (extend_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extend_;
    extend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_extend(::std::string* extend) {
  if (extend_ != &::google::protobuf::internal::kEmptyString) {
    delete extend_;
  }
  if (extend) {
    set_has_extend();
    extend_ = extend;
  } else {
    clear_has_extend();
    extend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .immortaldb.ItemList itemlist = 6;
inline bool Player::has_itemlist() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Player::set_has_itemlist() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Player::clear_has_itemlist() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Player::clear_itemlist() {
  if (itemlist_ != NULL) itemlist_->::immortaldb::ItemList::Clear();
  clear_has_itemlist();
}
inline const ::immortaldb::ItemList& Player::itemlist() const {
  return itemlist_ != NULL ? *itemlist_ : *default_instance_->itemlist_;
}
inline ::immortaldb::ItemList* Player::mutable_itemlist() {
  set_has_itemlist();
  if (itemlist_ == NULL) itemlist_ = new ::immortaldb::ItemList;
  return itemlist_;
}
inline ::immortaldb::ItemList* Player::release_itemlist() {
  clear_has_itemlist();
  ::immortaldb::ItemList* temp = itemlist_;
  itemlist_ = NULL;
  return temp;
}
inline void Player::set_allocated_itemlist(::immortaldb::ItemList* itemlist) {
  delete itemlist_;
  itemlist_ = itemlist;
  if (itemlist) {
    set_has_itemlist();
  } else {
    clear_has_itemlist();
  }
}

// required uint64 roleid = 7;
inline bool Player::has_roleid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Player::set_has_roleid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Player::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Player::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 Player::roleid() const {
  return roleid_;
}
inline void Player::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace immortaldb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_immortaldb_2eproto__INCLUDED
